import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class ProfileAnalysis {

    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        ObjectMapper objectMapper = new ObjectMapper();
        Configuration config = objectMapper.readValue(new File("config.json"), Configuration.class);

        for (String profileName : config.profiles.keySet()) {
            Profile profile = new Profile(profileName, config.profiles.get(profileName));
            profile.executeChecks();
        }
    }
}

class Configuration {
    public Map<String, Map<String, List<String>>> profiles;
}

class Profile {
    private String name;
    private Map<String, Map<String, List<String>>> checks;

    public Profile(String name, Map<String, Map<String, List<String>>> checks) {
        this.name = name;
        this.checks = checks;
    }

    public void executeChecks() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        int totalChecks = 0;
        int successfulChecks = 0;
        Set<String> failedMethods = new HashSet<>();

        for (Map<String, List<String>> checkCategory : checks.values()) {
            for (String method : checkCategory.values().stream().flatMap(List::stream).toList()) {
                totalChecks++;
                boolean result = executeMethod(method);
                if (!result) {
                    failedMethods.add(method);
                } else {
                    successfulChecks++;
                }
            }
        }

        double successPercentage = (double) successfulChecks / totalChecks * 100;
        System.out.println("Profile: " + name);
        System.out.printf("Success Percentage: %.2f%%\n", successPercentage);
        if (!failedMethods.isEmpty()) {
            System.out.println("Failed Methods:");
            for (String failedMethod : failedMethods) {
                System.out.println("- " + failedMethod);
            }
        }
    }

    private boolean executeMethod(String methodName) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Assuming classes are in the same package
        Class<?> clazz = Class.forName(methodName.substring(0, 1).toUpperCase() + methodName.substring(1));
        Method method = clazz.getMethod(methodName);
        return (boolean) method.invoke(clazz.getDeclaredConstructor().newInstance());
    }
}

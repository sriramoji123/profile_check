import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ProfileAnalysis {

    public static void main(String[] args) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        Configuration config = objectMapper.readValue(new File("config.json"), Configuration.class);

        for (String profileName : config.profiles.keySet()) {
            Profile profile = new Profile(profileName, config.profiles.get(profileName));
            profile.executeChecks();
        }
    }
}

class Configuration {
    public Map<String, Map<String, Set<String>>> profiles;
}

class Profile {
    private String name;
    private Set<String> accuracyMethods;
    private Set<String> integrityMethods;

    public Profile(String name, Map<String, Set<String>> methods) {
        this.name = name;
        this.accuracyMethods = methods.get("accuracy");
        this.integrityMethods = methods.get("integrity");
    }

    public void executeChecks() {
        int totalChecks = accuracyMethods.size() + integrityMethods.size();
        int successfulChecks = 0;
        Set<String> failedMethods = new HashSet<>();

        for (String method : accuracyMethods) {
            boolean result = executeMethod(method);
            if (!result) {
                failedMethods.add(method);
            } else {
                successfulChecks++;
            }
        }
        for (String method : integrityMethods) {
            boolean result = executeMethod(method);
            if (!result) {
                failedMethods.add(method);
            } else {
                successfulChecks++;
            }
        }

        double successPercentage = (double) successfulChecks / totalChecks * 100;
        System.out.println("Profile: " + name);
        System.out.printf("Success Percentage: %.2f%%\n", successPercentage);
        if (!failedMethods.isEmpty()) {
            System.out.println("Failed Methods:");
            for (String failedMethod : failedMethods) {
                System.out.println("- " + failedMethod);
            }
        }
    }

    // Replace this with actual method execution logic
    private boolean executeMethod(String methodName) {
        // Implement method execution logic here, e.g., call methods from your defined classes
        // For example:
        if (methodName.equals("CS1")) {
            return new CS().CS1();
        } else if (methodName.equals("UKBA")) {
            return new UKRA().UKBA();
        }
        // ... and so on for other methods
    }
}
